// ** EIM method **//
// ** u(x1,x2;mu1,mu2)=1/sqrt((x1-mu1)^2+(x2-mu2)^2) **//
// ** on the unit square with mu in [-1,-0.01]^2 **//
//
//
// ** Elise Grosjean **//

load "lapack"


//********************************************************************************//
//********************************************************************************//
//***************************** OFFLINE ******************************************//
//********************************************************************************//
//********************************************************************************//


//********************************************************************************//
//********************************************************************************//
//***************************** Initialization ***********************************//
//********************************************************************************//
//********************************************************************************//

int neV=10;//number of basis functions (a priori given)
int ns=10;//training parameters number (ns*ns)

int n=20;//mesh size
mesh Th=square(n,n);//unit square

fespace Ph(Th,P0); //P0 finite elements
Ph h = hTriangle; 
cout << "size of mesh 1 = " << h[].max << endl;


real mu1,mu2;//parameter in [-1,-0.01]^2
func g=1/sqrt((x-mu1)^2+(y-mu2)); //exact function
mu1=-0.5;mu2=-0.05; 
Ph uvef=g;

cout<<"g(0.5,0.5;[-0.5,-0.05]) "<<uvef(0.5,0.5)<<endl;

//max norm tabular
NewMacro MaxNormTabularFunc(g,mu1,mu2,mu11,mu22,ns,grilleg,grilleginfty){
	for(int i=0;i<ns;i++){
		for(int j=0;j<ns;j++){
			mu1=mu11(i);
			mu2=mu22(j);
			Ph u=g;
			grilleg(:,i*ns+j)=u[];
			grilleginfty(i*ns+j)=u[].linfty;
		}
	}  
}
EndMacro


//grid parameter repartition
NewMacro SetParamGridFunc(mubegin,muend,mu11,mu22,ns)
{
	real val=muend-(mubegin);
	for(int i=0;i<ns;i++){
     	mu11(i)=mubegin+i*val/ns;
      }
      mu22=mu11;
}
EndMacro

//sorting norm infty grid & find RB Phi_M...
NewMacro FindPhiMFunc(ii,grilleg,grilleginfty,IndexDejaUtil,M,phi){
	 sort(grilleginfty,ii);
	 IndexDejaUtil(M)=ii(ii.n-1); //index of [mu1,mu2] s.t. they maximize g-l(M-1) in infty norm: ii(ii.n-1)
	 phi[M][]=grilleg(:,ii(ii.n-1)); //basis phi_M = g(mu) 
}
EndMacro

//Magic points
NewMacro FindPtMagicMFunc(tmp,Th,vec,iit,imagic,jmagic,xmagic,ymagic,M)
{
	for (int i=0;i<Th.nt;i++){
	    for (int j=0; j <3; j++){
    	    	vec(i*3+j)=abs(tmp[][Ph(i,j)]);
    	     }
	 }

	 sort(vec,iit); //retrieve maximum on the domain Omega
	 imagic=iit(vec.n-1)/3; jmagic=iit(vec.n-1)-3*imagic; //  index : iit(vec.n-1)
	
	 //cout<<" xM "<<Th[imagic][jmagic].x << " yM "<< Th[imagic][jmagic].y<< " max  "<<abs(tmp[][Ph(imagic,jmagic)])<<endl;
	 tindex(M,0)=imagic;tindex(M,1)=jmagic;
	 t(M,0)=xmagic; t(M,1)=ymagic;  //pt magique M
}
EndMacro




real[int] mu11(ns); //Parameters mu1(table)
real[int] mu22(ns); //Parameters mu2 (table)
SetParamGridFunc(-1,-0.01,mu11,mu22,ns)
real[int,int] t(ns,2); //magics pts x,y
real[int,int] tindex(ns,2); //magics pts x,y:  indices Th[tindex(0,0)][tindex(0,1)].x (so on for y)
Ph[int] phi(neV); //g fund by the maximizations
Ph[int] qi(neV); //basis functions
Ph tmp,tmp2;
int[int] IndexAlreadyUtil(ns);IndexAlreadyUtil=-1; //for mu...
real[int,int] eps(ns*ns,neV);
real[int,int] epschap(ns*ns,neV);
int imagic,jmagic;
real xmagic,ymagic;

//*************************************************************************************************************//
//*************************************************************************************************************//
//************************************* Resolution for M=1 (in the code -> M=0) *******************************//
//*************************************************************************************************************//
//*************************************************************************************************************//

real[int,int] grilleg(Ph.ndof,ns*ns); //vector g(mu1,mu2) g(mu11,mu2i,...,mu12,mu2i...)
real[int,int] grilleg2(Ph.ndof,ns*ns); //vector g(mu1,mu2)-l(M-1) where l(M-1) is linear form
real[int] grilleginfty(ns*ns); //inf norm of the (g-l(M-1),inf;mu1,mu2) for each mu

MaxNormTabularFunc(g,mu1,mu2,mu11,mu22,ns,grilleg,grilleginfty)

int[int] ii(0:grilleginfty.n-1);
FindPhiMFunc(ii,grilleg,grilleginfty,IndexAlreadyUtil,0,phi) //sort


real[int] vec(Th.nt*3); //abs(phi0) : maximization over x abs(phi0)
int[int] iit(0:vec.n-1);
FindPtMagicMFunc(phi[0],Th,vec,iit,imagic,jmagic,xmagic,ymagic,0)

qi[0][]=phi[0][]/phi[0][][Ph(imagic,jmagic)];//First RB function


//*************************************************************************************************************//
//*************************************************************************************************************//
//************************************* Resolution for M \geq 2 (in the code -> M=0) **************************//
//*************************************************************************************************************//
//*************************************************************************************************************//


for(int M=1;M<neV;M++){
	cout<<"M: "<<M<<endl;
	real[int,int] Qmat(M,M); //triang inf matrix
	real[int] alpha(M);//coeff to be found
	real[int] G(M);//fct g : Q*alpha=G

	for(int k1=0;k1<M;k1++){
		for(int k2=0;k2<M;k2++){
			Qmat(k1,k2) = ( k2<=k1 ? qi[k2][][Ph(tindex(k1,0),tindex(k1,1))] : 0 ); //q_col(t_line) 
		}
	}

	real[int,int] Qmatinv(M,M);
	Qmatinv=Qmat^-1;

	cout<<" Q: "<<Qmat<<endl;

	for(int i=0;i<ns;i++){ //forloops on the parameters
		for(int j=0;j<ns;j++){
			mu1=mu11(i);
			mu2=mu22(j);
			tmp[]=grilleg(:,i*ns+j);
			for(int k1=0;k1<M;k1++){//Filling G 
				G(k1)=tmp[][Ph(tindex(k1,0),tindex(k1,1))];
			}
			alpha=Qmatinv*G; //Find alpha
			for(int k1=0;k1<M;k1++){
				tmp2[]=alpha(k1)*qi[k1][];
				tmp[]-=tmp2[];
			}
			grilleg2(:,i*ns+j)=tmp[];
			grilleginfty(i*ns+j)=tmp[].linfty;
			eps(i*ns+j,M-1)=tmp[].linfty;
			for(int k3=0;k3<M;k3++){//previous indices
				if(IndexAlreadyUtil(k3)==i*ns+j){
					grilleginfty(i*ns+j)=-1;//delete mu1,mu2
				}
			}
		}
	}

	//retrieving mu_M
	int[int] ii2(0:grilleginfty.n-1);
	FindPhiMFunc(ii2,grilleg,grilleginfty,IndexAlreadyUtil,M,phi)
	
	tmp[]=grilleg2(:,ii2(ii2.n-1));	//magic point maximization on x of abs(phiM-l(M-1))

	int[int] iit(0:vec.n-1);
	FindPtMagicMFunc(tmp,Th,vec,iit,imagic,jmagic,xmagic,ymagic,M)

	 Ph[int] tmpp(ns*ns);
	 for(int i=0;i<ns*ns;i++){
	  	 tmpp[i][]=grilleg2(:,i);
	}

	for(int i=0;i<ns*ns;i++){
	 epschap(i,M-1)=abs(tmpp[i][][Ph(imagic,jmagic)]);
	 }
	 qi[M][]=tmp[]/(tmp[][Ph(imagic,jmagic)]);  //basis M
	
}



//********************************************************************************//
//********************************************************************************//
//***************************** ONLINE  ******************************************//
//********************************************************************************//
//********************************************************************************//

mu1=-0.5;mu2=-0.5;
Ph u=g;

real xseek=0.5;real yseek=0.5;
real sol=0;
real[int,int] Qmat(neV,neV);
real[int] G(neV);

real[int] alpha(neV);//coeff to be found
for(int k1=0;k1<neV;k1++){
	for(int k2=0;k2<neV;k2++){
		//Qmat(k1,k2) = qi[k2][][Ph(tindex(k1,0),tindex(k1,1))]; 
		Qmat(k1,k2) = ( k2<=k1 ? qi[k2][][Ph(tindex(k1,0),tindex(k1,1))] : 0 ); //q_col(t_ligne) 
	}
}

cout<<"Q: "<<Qmat<<endl;
real[int,int] Qmatinv(neV,neV);
Qmatinv=Qmat^-1;
tmp=g;
for(int k1=0;k1<neV;k1++){//filling G : Q can be filled outside the parameters forloops
	G(k1)=tmp[][Ph(tindex(k1,0),tindex(k1,1))];
}

alpha=Qmatinv*G; //corresponding alpha 


for(int i=0;i<neV;i++){
		sol+=alpha(i)*qi[i](xseek,yseek);
		//sol+=alpha(i)*qi[i][][Ph(tindex(0,0),tindex(0,1))];
}

//real test=abs(sol-u[][Ph(tindex(0,0),tindex(0,1))]);
real test=abs(sol-u(xseek,yseek));
//cout<< "Found solution "<<sol<<" " <<u[][Ph(tindex(0,0),tindex(0,1))]<<" "<<test<<endl;
cout<<"//*********************************************************************************//"<<endl;
cout<<"//***************************************************"<<"(x,y)=("<<xseek<<","<<yseek<<")"<<"*********//"<<endl;
cout<< "//**    Approximation: "<<sol<<" true solution: "<<u(xseek,yseek)<<" error " <<test<< "        **//"<< endl;
cout<<"//*********************************************************************************//"<<endl;


for(int i=0;i<neV-1;i++){
int k=IndexAlreadyUtil(i+1);
	for(int j=0;j<ns*ns;j++){
		//cout<<epschap(k,i)<<endl;
		//cout<<eps(k,i)<<endl;
		real test2=epschap(j,i)/eps(j,i);
		if(test2>1){
			cout<<i <<" "<<test2<<endl;
		}
	}
}


